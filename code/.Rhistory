col=c("red", "blue"),
lty=2:1,
cex=1.1,
box.lty=0)
# Histogram of ASEHolder
hist(ASEHolder.2_weeks,
main = "Histogram of Average Squared Error (ASE) Values",
xlab = "Windowed ASE",
ylab = "Frequency",
col = "lightblue",
labels = TRUE,
cex.main = 1.5,
cex.lab = 1.5)
# add mean and median labels on x-axis
axis(1,
at = c(mean(ASEHolder.2_weeks), median(ASEHolder.2_weeks)),
labels = formatC(c(mean(ASEHolder.2_weeks), median(ASEHolder.2_weeks)), format = "d"),
las = 1)
# add dotted red line for median and solid blue line for mean
abline(v = median(ASEHolder.2_weeks), col="red", lwd=3, lty=2)
abline(v = mean(ASEHolder.2_weeks), col="blue")
# add legend
legend("topright",
inset = 0.2,
legend=c("Median Windowed ASE", "Mean Windowed ASE"),
col=c("red", "blue"),
lty=2:1,
cex=1.1,
box.lty=0)
# Histogram of ASEHolder
hist(ASEHolder.6_months,
main = "Histogram of Average Squared Error (ASE) Values",
xlab = "Windowed ASE",
ylab = "Frequency",
col = "lightblue",
labels = TRUE,
cex.main = 1.5,
cex.lab = 1.5)
# add mean and median labels on x-axis
axis(1,
at = c(mean(ASEHolder.6_months), median(ASEHolder.6_months)),
labels = formatC(c(mean(ASEHolder.6_months), median(ASEHolder.6_months)), format = "d"),
las = 1)
# add dotted red line for median and solid blue line for mean
abline(v = median(ASEHolder.6_months), col="red", lwd=3, lty=2)
abline(v = mean(ASEHolder.6_months), col="blue")
# add legend
legend("topright",
inset = 0.2,
legend=c("Median Windowed ASE", "Mean Windowed ASE"),
col=c("red", "blue"),
lty=2:1,
cex=1.1,
box.lty=0)
max(ASEHolder.6_months)
single_ASE.6_month_forecast = max(ASEHolder.6_months)
max_rolling_window_ASE.6_month_forecast = ASEHolder.6_months[105]
print("Single ASE Value for 6-month forecast is ", single_ASE.6_month_forecast)
print(paste0("Single ASE Value for 6-month forecast is ", single_ASE.6_month_forecast))
print(paste0("Single ASE Value for 6-month forecast is ", format(single_ASE.6_month_forecast, digits = 3))
print(paste0("Single ASE Value for 6-month forecast is ", format(single_ASE.6_month_forecast, digits = 3)))
print(paste0("Single ASE Value for 6-month forecast is "), format(single_ASE.6_month_forecast, digits = 3))
print(paste0("Single ASE Value for 6-month forecast is ", single_ASE.6_month_forecast))
single_ASE.6_month_forecast = max(ASEHolder.6_months)
max_rolling_window_ASE.6_month_forecast = ASEHolder.6_months[105]
print(paste0("Single ASE Value for 6-month forecast is ", single_ASE.6_month_forecast))
print(paste0("Rolling Windos Max ASE Value for 6-month forecast is ", max_rolling_window_ASE.6_month_forecast))
single_ASE.6_month_forecast = max(ASEHolder.6_months)
max_rolling_window_ASE.6_month_forecast = ASEHolder.6_months[105]
print(paste0("Single ASE Value for 6-month forecast is ", single_ASE.6_month_forecast))
print(paste0("Rolling Window Max ASE Value for 6-month forecast is ", max_rolling_window_ASE.6_month_forecast))
```{r}
single_ASE.6_month_forecast = ASEHolder.6_months[105]
max_rolling_window_ASE.6_month_forecast = max(ASEHolder.6_months)
print(paste0("Single ASE Value for 6-month forecast is ", single_ASE.6_month_forecast))
print(paste0("Rolling Window Max ASE Value for 6-month forecast is ", max_rolling_window_ASE.6_month_forecast))
single_ASE.6_month_forecast = ASEHolder.6_months[105]
max_rolling_window_ASE.6_month_forecast = max(ASEHolder.6_months)
print(paste0("Single ASE Value for 6-month forecast is ", single_ASE.6_month_forecast))
print(paste0("Rolling Window Max ASE Value for 6-month forecast is ", max_rolling_window_ASE.6_month_forecast))
format(paste0("Rolling Window Max ASE Value for 6-month forecast is ", max_rolling_window_ASE.6_month_forecast, nsmall=3))
single_ASE.6_month_forecast = format(ASEHolder.6_months[105], digits = 3)
max_rolling_window_ASE.6_month_forecast = max(ASEHolder.6_months)
print(paste0("Single ASE Value for 6-month forecast is ", single_ASE.6_month_forecast))
print(paste0("Rolling Window Max ASE Value for 6-month forecast is ", max_rolling_window_ASE.6_month_forecast))
format(paste0("Rolling Window Max ASE Value for 6-month forecast is ", max_rolling_window_ASE.6_month_forecast)
single_ASE.6_month_forecast = format(ASEHolder.6_months[105], digits = 3)
max_rolling_window_ASE.6_month_forecast = format(max(ASEHolder.6_months), digits =3)
print(paste0("Single ASE Value for 6-month forecast is ", single_ASE.6_month_forecast))
print(paste0("Rolling Window Max ASE Value for 6-month forecast is ", max_rolling_window_ASE.6_month_forecast))
single_ASE.6_month_forecast = format(ASEHolder.6_months[105], digits = 4)
max_rolling_window_ASE.6_month_forecast = format(max(ASEHolder.6_months), digits =4)
print(paste0("Single ASE Value for 6-month forecast is ", single_ASE.6_month_forecast))
print(paste0("Rolling Window Max ASE Value for 6-month forecast is ", max_rolling_window_ASE.6_month_forecast))
summary(ASEHolder.6_months)
forecast_horizon <- c("2 weeks", "4 weeks", "3 months", "6 months")
single_ASE <- c(ASEHolder.2_weeks[105],ASEHolder.4_weeks[105], ASEHolder.3_months[105], ASEHolder.6_months[105])
mean_rolling_window_ASE<- c(mean_windowed_ASE.2_weeks,mean_windowed_ASE.4_weeks, mean_windowed_ASE.3_months, mean_windowedASE.6_months)
median_rolling_window_ASE <- c(median_windowed_ASE.2_weeks, median_windowed_ASE.4_weeks, median_windowed_ASE.3_months, median_windowedASE.6_months)
rolling.window.ASE <- data.frame(forecast_horizon, single_ASE, mean_rolling_window_ASE, median_rolling_window_ASE)
names(rolling.window.ASE)[names(rolling.window.ASE) == "forecast_horizon"] <- "Forecast Horizon"
names(rolling.window.ASE)[names(rolling.window.ASE) == "single_ASE"] <- "Single ASE"
names(rolling.window.ASE)[names(rolling.window.ASE) == "mean_rolling_window_ASE"] <- "Rolling Window ASE (Mean)"
names(rolling.window.ASE)[names(rolling.window.ASE) == "median_rolling_window_ASE"] <- "Rolling Window ASE (Median)"
customGreen0 = "#DeF7E9"
customGreen = "#71CA97"
formattable(rolling.window.ASE, align =c("l","c","c"), list(
`Forecast Horizon` = formatter("span", style = ~ style(color = "grey",font.weight = "bold")),
`Single ASE`= color_tile(customGreen, customGreen0),
`Rolling Window ASE (Mean)`= color_tile(customGreen, customGreen0),
`Rolling Window ASE (Median)`= color_tile(customGreen, customGreen0)
))
# Histogram of ASEHolder
hist(ASEHolder.6_months,
main = "Histogram of Average Squared Error (ASE) Values",
xlab = "Windowed ASE",
ylab = "Frequency",
col = "lightblue",
labels = TRUE,
cex.main = 1.5,
cex.lab = 1.5)
# add mean and median labels on x-axis
axis(1,
at = c(mean(ASEHolder.6_months), median(ASEHolder.6_months)),
labels = formatC(c(mean(ASEHolder.6_months), median(ASEHolder.6_months)), format = "d"),
las = 1)
# add dotted red line for median and solid blue line for mean
abline(v = median(ASEHolder.6_months), col="red", lwd=3, lty=2)
abline(v = mean(ASEHolder.6_months), col="blue")
# add legend
legend("topright",
inset = 0.2,
legend=c("Median Windowed ASE", "Mean Windowed ASE"),
col=c("red", "blue"),
lty=2:1,
cex=1.1,
box.lty=0)
forecast.3_months = fore.aruma.wge(ts.log_flu,
phi=params$phi,
theta=params$theta,
n.ahead = 26,
lastn = TRUE,
plot=TRUE,
limits=TRUE)
ASE.2_week_forecast = mean(forecast.3_months$f - ts.log_flu[235:260])
horizon = 52 # we forecast out 1 year, or 52 weeks
ASEHolder.1_year = numeric() # this is an empty varible that will hold all the ASE values
for( i in 1:(260-(trainingSize + horizon) + 1))
{
forecasts = fore.aruma.wge(ts.log_flu[i:(i+(trainingSize-1))],
phi = phis, theta = thetas,
s = s, d = d, n.ahead = horizon,plot=FALSE)
ASE = mean((ts.log_flu[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - forecasts$f)^2)
ASEHolder.1_year[i] = ASE
}
mean_windowedASE.6_months = mean(ASEHolder.1_year)
median_windowedASE.6_months = median(ASEHolder.1_year)
# visualization of windowed ASE over time
newASE = c(rep(NA, 131), ASEHolder.1_year) # this plots ASE from week 131 onward
par(mar = c(5,5,2,5))
plot(ts.log_flu, type="l", ylab='Flu Positive Rate', xlab='Time', las = 1, col="blue", main = 'Figure 14 \nRolling Window ASE Over Time (6-month forecast)')
par(new = T)
# plot rolling window ASE
plot(ASEHolder.1_year, type="l", lty=2, axes=F, ylab=NA, xlab=NA, col="red")
# create tick marks and label on right vertical axis
axis(side=4, las=1)
# add ASE line
mtext(side=4, line=3, 'ASE')
# add legend
legend("topleft", legend=c("Obs. Value", "ASE"), lty=c(1, 2), col=c("blue", "red"), cex=.6)
horizon = 52 # we forecast out 1 year, or 52 weeks
ASEHolder.1_year = numeric() # this is an empty varible that will hold all the ASE values
for( i in 1:(260-(trainingSize + horizon) + 1))
{
forecasts = fore.aruma.wge(ts.log_flu[i:(i+(trainingSize-1))],
phi = phis, theta = thetas,
s = s, d = d, n.ahead = horizon,plot=FALSE)
ASE = mean((ts.log_flu[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - forecasts$f)^2)
ASEHolder.1_year[i] = ASE
}
mean_windowedASE.6_months = mean(ASEHolder.1_year)
median_windowedASE.6_months = median(ASEHolder.1_year)
# visualization of windowed ASE over time
newASE = c(rep(NA, 131), ASEHolder.1_year) # this plots ASE from week 131 onward
par(mar = c(5,5,2,5))
plot(ts.log_flu, type="l", ylab='Flu Positive Rate', xlab='Time', las = 1, col="blue", main = 'Figure 14 \nRolling Window ASE Over Time (1-year forecast)')
par(new = T)
# plot rolling window ASE
plot(ASEHolder.1_year, type="l", lty=2, axes=F, ylab=NA, xlab=NA, col="red")
# create tick marks and label on right vertical axis
axis(side=4, las=1)
# add ASE line
mtext(side=4, line=3, 'ASE')
# add legend
legend("topleft", legend=c("Obs. Value", "ASE"), lty=c(1, 2), col=c("blue", "red"), cex=.6)
horizon = 52 # we forecast out 1 year, or 52 weeks
ASEHolder.1_year = numeric() # this is an empty varible that will hold all the ASE values
for( i in 1:(260-(trainingSize + horizon) + 1))
{
forecasts = fore.aruma.wge(ts.log_flu[i:(i+(trainingSize-1))],
phi = phis, theta = thetas,
s = s, d = d, n.ahead = horizon,plot=FALSE)
ASE = mean((ts.log_flu[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - forecasts$f)^2)
ASEHolder.1_year[i] = ASE
}
mean_windowedASE.6_months = mean(ASEHolder.1_year)
median_windowedASE.6_months = median(ASEHolder.1_year)
# visualization of windowed ASE over time
newASE = c(rep(NA, 131), ASEHolder.1_year) # this plots ASE from week 131 onward
par(mar = c(5,5,2,5))
plot(ts.log_flu, type="l", ylab='Flu Positive Rate', xlab='Time', las = 1, col="blue", main = 'Figure 14 \nRolling Window ASE Over Time (1-year forecast)')
par(new = T)
# plot rolling window ASE
plot(newASE, type="l", lty=2, axes=F, ylab=NA, xlab=NA, col="red")
# create tick marks and label on right vertical axis
axis(side=4, las=1)
# add ASE line
mtext(side=4, line=3, 'ASE')
# add legend
legend("topleft", legend=c("Obs. Value", "ASE"), lty=c(1, 2), col=c("blue", "red"), cex=.6)
horizon = 52 # we forecast out 1 year, or 52 weeks
ASEHolder.1_year = numeric() # this is an empty varible that will hold all the ASE values
for( i in 1:(260-(trainingSize + horizon) + 1))
{
forecasts = fore.aruma.wge(ts.log_flu[i:(i+(trainingSize-1))],
phi = phis, theta = thetas,
s = s, d = d, n.ahead = horizon,plot=FALSE)
ASE = mean((ts.log_flu[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - forecasts$f)^2)
ASEHolder.1_year[i] = ASE
}
mean_windowedASE.6_months = mean(ASEHolder.1_year)
median_windowedASE.6_months = median(ASEHolder.1_year)
# visualization of windowed ASE over time
par(mar = c(5,5,2,5))
plot(ts.log_flu, type="l", ylab='Flu Positive Rate', xlab='Time', las = 1, col="blue", main = 'Figure 15 \nRolling Window ASE Over Time (1-year forecast)')
par(new = T)
# plot rolling window ASE
plot(ASEHolder.1_year, type="l", lty=2, axes=F, ylab=NA, xlab=NA, col="red")
# create tick marks and label on right vertical axis
axis(side=4, las=1)
# add ASE line
mtext(side=4, line=3, 'ASE')
# add legend
legend("topleft", legend=c("Obs. Value", "ASE"), lty=c(1, 2), col=c("blue", "red"), cex=.6)
forecast_horizon <- c("2 weeks", "4 weeks", "3 months", "6 months", "1 year")
single_ASE <- c(ASEHolder.2_weeks[105],ASEHolder.4_weeks[105], ASEHolder.3_months[105], ASEHolder.6_months[105], ASEHolder.1_year[105])
mean_rolling_window_ASE<- c(mean_windowed_ASE.2_weeks,mean_windowed_ASE.4_weeks, mean_windowed_ASE.3_months, mean_windowedASE.6_months, mean_windowedASE.1_year)
horizon = 26 # we forecast out 6 months, or 26 weeks
ASEHolder.6_months = numeric() # this is an empty varible that will hold all the ASE values
for( i in 1:(260-(trainingSize + horizon) + 1))
{
forecasts = fore.aruma.wge(ts.log_flu[i:(i+(trainingSize-1))],
phi = phis, theta = thetas,
s = s, d = d, n.ahead = horizon,plot=FALSE)
ASE = mean((ts.log_flu[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - forecasts$f)^2)
ASEHolder.6_months[i] = ASE
}
mean_windowedASE.6_months = mean(ASEHolder.6_months)
median_windowedASE.6_months = median(ASEHolder.6_months)
# visualization of windowed ASE over time
newASE = c(rep(NA, 131), ASEHolder.6_months) # this plots ASE from week 131 onward
par(mar = c(5,5,2,5))
plot(ts.log_flu, type="l", ylab='Flu Positive Rate', xlab='Time', las = 1, col="blue", main = 'Figure 14 \nRolling Window ASE Over Time (6-month forecast)')
par(new = T)
# plot rolling window ASE
plot(ASEHolder.6_months, type="l", lty=2, axes=F, ylab=NA, xlab=NA, col="red")
# create tick marks and label on right vertical axis
axis(side=4, las=1)
# add ASE line
mtext(side=4, line=3, 'ASE')
# add legend
legend("topleft", legend=c("Obs. Value", "ASE"), lty=c(1, 2), col=c("blue", "red"), cex=.6)
horizon = 52 # we forecast out 1 year, or 52 weeks
ASEHolder.1_year = numeric() # this is an empty varible that will hold all the ASE values
for( i in 1:(260-(trainingSize + horizon) + 1))
{
forecasts = fore.aruma.wge(ts.log_flu[i:(i+(trainingSize-1))],
phi = phis, theta = thetas,
s = s, d = d, n.ahead = horizon,plot=FALSE)
ASE = mean((ts.log_flu[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - forecasts$f)^2)
ASEHolder.1_year[i] = ASE
}
mean_windowedASE.1_year = mean(ASEHolder.1_year)
median_windowedASE.1_year = median(ASEHolder.1_year)
# visualization of windowed ASE over time
par(mar = c(5,5,2,5))
plot(ts.log_flu, type="l", ylab='Flu Positive Rate', xlab='Time', las = 1, col="blue", main = 'Figure 15 \nRolling Window ASE Over Time (1-year forecast)')
par(new = T)
# plot rolling window ASE
plot(ASEHolder.1_year, type="l", lty=2, axes=F, ylab=NA, xlab=NA, col="red")
# create tick marks and label on right vertical axis
axis(side=4, las=1)
# add ASE line
mtext(side=4, line=3, 'ASE')
# add legend
legend("topleft", legend=c("Obs. Value", "ASE"), lty=c(1, 2), col=c("blue", "red"), cex=.6)
forecast_horizon <- c("2 weeks", "4 weeks", "3 months", "6 months", "1 year")
single_ASE <- c(ASEHolder.2_weeks[105],ASEHolder.4_weeks[105], ASEHolder.3_months[105], ASEHolder.6_months[105], ASEHolder.1_year[105])
mean_rolling_window_ASE<- c(mean_windowed_ASE.2_weeks,mean_windowed_ASE.4_weeks, mean_windowed_ASE.3_months, mean_windowedASE.6_months, mean_windowedASE.1_year)
median_rolling_window_ASE <- c(median_windowed_ASE.2_weeks, median_windowed_ASE.4_weeks, median_windowed_ASE.3_months, median_windowedASE.6_months, median_windowedASE.1_year)
rolling.window.ASE <- data.frame(forecast_horizon, single_ASE, mean_rolling_window_ASE, median_rolling_window_ASE)
names(rolling.window.ASE)[names(rolling.window.ASE) == "forecast_horizon"] <- "Forecast Horizon"
names(rolling.window.ASE)[names(rolling.window.ASE) == "single_ASE"] <- "Single ASE"
names(rolling.window.ASE)[names(rolling.window.ASE) == "mean_rolling_window_ASE"] <- "Rolling Window ASE (Mean)"
names(rolling.window.ASE)[names(rolling.window.ASE) == "median_rolling_window_ASE"] <- "Rolling Window ASE (Median)"
customGreen0 = "#DeF7E9"
customGreen = "#71CA97"
formattable(rolling.window.ASE, align =c("l","c","c"), list(
`Forecast Horizon` = formatter("span", style = ~ style(color = "grey",font.weight = "bold")),
`Single ASE`= color_tile(customGreen, customGreen0),
`Rolling Window ASE (Mean)`= color_tile(customGreen, customGreen0),
`Rolling Window ASE (Median)`= color_tile(customGreen, customGreen0)
))
ASEHolder.1_year[105]
ASEHolder.1_year
tail(ASEHolder.1_year, n=1)
single_ASE.2_weeks = tail(ASEHolder.2_weeks, n=1)
single_ASE.4_weeks = tail(ASEHolder.4_weeks, n=1)
single_ASE.3_months = tail(ASEHolder.3_months, n=1)
single_ASE.6_months = tail(ASEHolder.6_months, n=1)
single_ASE.1_year = tail(ASEHolder.1_year, n=1)
forecast_horizon <- c("2 weeks", "4 weeks", "3 months", "6 months", "1 year")
single_ASE <- c(single_ASE.2_weeks, single_ASE.4_weeks, single_ASE.3_months, single_ASE.6_months, single_ASE.1_year)
mean_rolling_window_ASE<- c(mean_windowed_ASE.2_weeks,mean_windowed_ASE.4_weeks, mean_windowed_ASE.3_months, mean_windowedASE.6_months, mean_windowedASE.1_year)
median_rolling_window_ASE <- c(median_windowed_ASE.2_weeks, median_windowed_ASE.4_weeks, median_windowed_ASE.3_months, median_windowedASE.6_months, median_windowedASE.1_year)
rolling.window.ASE <- data.frame(forecast_horizon, single_ASE, mean_rolling_window_ASE, median_rolling_window_ASE)
names(rolling.window.ASE)[names(rolling.window.ASE) == "forecast_horizon"] <- "Forecast Horizon"
names(rolling.window.ASE)[names(rolling.window.ASE) == "single_ASE"] <- "Single ASE"
names(rolling.window.ASE)[names(rolling.window.ASE) == "mean_rolling_window_ASE"] <- "Rolling Window ASE (Mean)"
names(rolling.window.ASE)[names(rolling.window.ASE) == "median_rolling_window_ASE"] <- "Rolling Window ASE (Median)"
customGreen0 = "#DeF7E9"
customGreen = "#71CA97"
formattable(rolling.window.ASE, align =c("l","c","c"), list(
`Forecast Horizon` = formatter("span", style = ~ style(color = "grey",font.weight = "bold")),
`Single ASE`= color_tile(customGreen, customGreen0),
`Rolling Window ASE (Mean)`= color_tile(customGreen, customGreen0),
`Rolling Window ASE (Median)`= color_tile(customGreen, customGreen0)
))
single_ASE.2_weeks = tail(ASEHolder.2_weeks, n=1)
single_ASE.4_weeks = tail(ASEHolder.4_weeks, n=1)
single_ASE.3_months = tail(ASEHolder.3_months, n=1)
single_ASE.6_months = tail(ASEHolder.6_months, n=1)
single_ASE.1_year = tail(ASEHolder.1_year, n=1)
forecast_horizon <- c("2 weeks", "4 weeks", "3 months", "6 months", "1 year")
single_ASE <- c(single_ASE.2_weeks, single_ASE.4_weeks, single_ASE.3_months, single_ASE.6_months, single_ASE.1_year)
mean_rolling_window_ASE<- c(mean_windowed_ASE.2_weeks,mean_windowed_ASE.4_weeks, mean_windowed_ASE.3_months, mean_windowedASE.6_months, mean_windowedASE.1_year)
median_rolling_window_ASE <- c(median_windowed_ASE.2_weeks, median_windowed_ASE.4_weeks, median_windowed_ASE.3_months, median_windowedASE.6_months, median_windowedASE.1_year)
rolling.window.ASE <- data.frame(forecast_horizon, single_ASE, mean_rolling_window_ASE, median_rolling_window_ASE)
names(rolling.window.ASE)[names(rolling.window.ASE) == "forecast_horizon"] <- "Forecast Horizon"
names(rolling.window.ASE)[names(rolling.window.ASE) == "single_ASE"] <- "Single ASE"
names(rolling.window.ASE)[names(rolling.window.ASE) == "mean_rolling_window_ASE"] <- "Rolling Window ASE (Mean)"
names(rolling.window.ASE)[names(rolling.window.ASE) == "median_rolling_window_ASE"] <- "Rolling Window ASE (Median)"
customGreen0 = "#DeF7E9"
customGreen = "#71CA97"
formattable(rolling.window.ASE, align =c("l","c","c"), list(
`Forecast Horizon` = formatter("span", style = ~ style(color = "grey",font.weight = "bold")),
`Single ASE`= color_tile(customGreen, customGreen0),
`Rolling Window ASE (Mean)`= color_tile(customGreen, customGreen0),
`Rolling Window ASE (Median)`= color_tile(customGreen, customGreen0)
))
setwd("~/Dropbox/_SMU/MSDS_6120_CapstoneA/SMU-Capstone/code")
library(rmdformats)    # for html formattinglibrary(tidyverse) # data wrangling
library(tidyverse)     # data manipulaiton
library(tswge)  # Time series package
library(tseries)  # for Dickey-Fuller test
library(formattable)  # for table formatting
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE,
prompt = FALSE,
tidy = TRUE,
comment = NA,
message = FALSE,
warning = FALSE)
df_17_19 = read.csv("C:/Users/b007224/Documents/masters_in_data_science/capstone/data/Bivin CC 2017-19_updated_headings.csv")
getwd()
df_17_19 = read.csv('../data/Bivin CC 2017-19_updated_headings.csv')
library(rmdformats)    # for html formattinglibrary(tidyverse) # data wrangling
library(tidyverse)     # data manipulaiton
library(tswge)  # Time series package
library(tseries)  # for Dickey-Fuller test
library(formattable)  # for table formatting
library(ggplot2)
library(readr)
knitr::opts_chunk$set(echo = TRUE,
prompt = FALSE,
tidy = TRUE,
comment = NA,
message = FALSE,
warning = FALSE)
df_17_19 = read.csv('../data/Bivin CC 2017-19_updated_headings.csv')
df_15_16 = read.csv('../data//Bivin CC 2015-16_updated_headings.csv')
df_13_14 = read.csv('../data/Bivin CC 2013-14_updated_headings.csv')
dim(df_17_19)
dim(df_15_16)
dim(df_13_14)
#format date column
df_17_19$date = date.mmddyy(mdy.date(match(substr(df_17_19$Month, 1, 3),month.abb),01,df_17_19$Year),sep="/")
install.packages(c("changepoint", "date", "R.devices", "randomForest"))
library(rmdformats)    # for html formattinglibrary(tidyverse) # data wrangling
library(tidyverse)     # data manipulaiton
library(tswge)  # Time series package
library(tseries)  # for Dickey-Fuller test
library(formattable)  # for table formatting
library(ggplot2)
library(readr)
library(date)
library(changepoint)
knitr::opts_chunk$set(echo = TRUE,
prompt = FALSE,
tidy = TRUE,
comment = NA,
message = FALSE,
warning = FALSE)
df_17_19 = read.csv('../data/Bivin CC 2017-19_updated_headings.csv')
df_15_16 = read.csv('../data//Bivin CC 2015-16_updated_headings.csv')
df_13_14 = read.csv('../data/Bivin CC 2013-14_updated_headings.csv')
dim(df_17_19)
dim(df_15_16)
dim(df_13_14)
#format date column
df_17_19$date = date.mmddyy(mdy.date(match(substr(df_17_19$Month, 1, 3),month.abb),01,df_17_19$Year),sep="/")
df_15_16$date = date.mmddyy(mdy.date(match(substr(df_15_16$Month, 4, 6),month.abb),01,df_15_16$Year),sep="/")
df_13_14$date = date.mmddyy(mdy.date(match(substr(df_13_14$Month, 1, 3),month.abb),01,df_13_14$Year),sep="/")
df <- rbind(df_17_19,df_15_16,df_13_14)
dim(df)
check.for.missing.data <- function(data){
a = colnames(data)
b = colSums(is.na(df))  %>% as.data.table
missing_value_table = cbind(a, b)
colnames(missing_value_table) = c("Variables","Missing_values")
missing_value_table = missing_value_table  %>% filter(Missing_values>0)  %>%
mutate("As a % of Total Values" = round(100 * (Missing_values / nrow(df)), 1))  %>%
arrange(desc(Missing_values))
head(missing_value_table, 20)
}
table_a = check.for.missing.data(data=df)
library(data.table)
check.for.missing.data <- function(data){
a = colnames(data)
b = colSums(is.na(df))  %>% as.data.table
missing_value_table = cbind(a, b)
colnames(missing_value_table) = c("Variables","Missing_values")
missing_value_table = missing_value_table  %>% filter(Missing_values>0)  %>%
mutate("As a % of Total Values" = round(100 * (Missing_values / nrow(df)), 1))  %>%
arrange(desc(Missing_values))
head(missing_value_table, 20)
}
table_a = check.for.missing.data(data=df)
# display table with first column aligned left all others aligned right
formattable(table_a, align = c("l", rep("r", NCOL(table_a) - 1)))
library(rmdformats)    # for html formattinglibrary(tidyverse) # data wrangling
library(tidyverse)     # data manipulaiton
library(tswge)  # Time series package
library(tseries)  # for Dickey-Fuller test
library(formattable)  # for table formatting
library(ggplot2)
library(readr)
library(date)
library(changepoint)
library(data.table)
knitr::opts_chunk$set(echo = TRUE,
prompt = FALSE,
tidy = TRUE,
comment = NA,
message = FALSE,
warning = FALSE)
invisible(df %>% filter(Account_Status != "Closed"))
drops <- c("Metrics","Year","Month","House","Account_Status","Beverage_Type","Fiscal_Year","Premise","Customer_Street_Address","Customer_City",
"Customer_Zip_Code","Longitude_Customer","Latitude_Customer","Customer","Vendor","Brand_ID","Brand","Size","Product_ID","Chain","Category",
"Product_Type_ID","Qty_Per_Case","Alcohol_Proof","X9L_Cases","Dollar_Sales_Per_Case","Dollar_Sales_Per_9L_Case")
df = df[ , !(names(df) %in% drops)]
df$Dollar_Sales = as.numeric(gsub('[$,]', '', df$Dollar_Sales))
str(df)
product_type_group = df %>% group_by(Product_Type) %>% tally(sort=TRUE)
dim(product_type_group)
formattable(head(product_type_group), align = c("l", rep("r", NCOL(table_a) - 1)))
product_group = df %>% group_by(Product) %>% tally(sort=TRUE)
dim(product_group)
formattable(head(product_group), align = c("l", rep("r", NCOL(table_a) - 1)))
customer_group = df %>% group_by(Customer_ID) %>% tally(sort=TRUE)
dim(customer_group)
formattable(head(customer_group), align = c("l", rep("r", NCOL(table_a) - 1)))
product_type_product_group = df %>% group_by(Product_Type, Product) %>% tally(sort=TRUE)
dim(product_type_product_group)
formattable(head(product_type_product_group), align = c("l", rep("r", NCOL(table_a) - 1)))
all_group = df %>% group_by(Product_Type, Product, Customer_ID) %>% tally(sort=TRUE)
dim(all_group)
formattable(head(all_group), align = c("l", rep("r", NCOL(table_a) - 1)))
# Create file with all possible combinations
combinations0 = as.data.frame(df %>% group_by(Product_Type, Product, Customer_ID) %>% tally(sort=TRUE))
combinations = combinations0 %>% filter(n >= 42)
# Sample combinations
set.seed(123)
sample_combinations = sample_n(combinations,10)
drops <- c("n")
sample_combinations = sample_combinations[ , !(names(sample_combinations) %in% drops)]
formattable(sample_combinations, align = c("l", rep("r", NCOL(table_a) - 1)))
# Find data from file for first combination
all_dates = data.frame(date=c("1/1/2013","2/1/2013","3/1/2013","4/1/2013","5/1/2013","6/1/2013","7/1/2013","8/1/2013","9/1/2013","10/1/2013","11/1/2013","12/1/2013",
"1/1/2014","2/1/2014","3/1/2014","4/1/2014","5/1/2014","6/1/2014","7/1/2014","8/1/2014","9/1/2014","10/1/2014","11/1/2014","12/1/2014",
"1/1/2015","2/1/2015","3/1/2015","4/1/2015","5/1/2015","6/1/2015","7/1/2015","8/1/2015","9/1/2015","10/1/2015","11/1/2015","12/1/2015",
"1/1/2016","2/1/2016","3/1/2016","4/1/2016","5/1/2016","6/1/2016","7/1/2016","8/1/2016","9/1/2016","10/1/2016","11/1/2016","12/1/2016",
"1/1/2017","2/1/2017","3/1/2017","4/1/2017","5/1/2017","6/1/2017","7/1/2017","8/1/2017","9/1/2017","10/1/2017","11/1/2017","12/1/2017",
"1/1/2018","2/1/2018","3/1/2018","4/1/2018","5/1/2018","6/1/2018","7/1/2018","8/1/2018","9/1/2018","10/1/2018","11/1/2018","12/1/2018",
"1/1/2019","2/1/2019","3/1/2019","4/1/2019","5/1/2019","6/1/2019","7/1/2019","8/1/2019","9/1/2019","10/1/2019","11/1/2019","12/1/2019"))
date_combinations = merge(all_dates,sample_combinations,all=TRUE)
str(date_combinations)
# Join date/sample combinations with primary dataset to review records
temp = left_join(date_combinations,df)
# Replace missing values for STD_Cases and Dollar_Sales with zeros since no cases were sold those months
temp[is.na(temp)] <- 0
str(temp)
