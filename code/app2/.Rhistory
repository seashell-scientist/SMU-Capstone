dev.off()
trainingSize = 60
ASEHolder1 = numeric()
ASEHolder2 = numeric()
ASEHolder3 = numeric()
ASEHolder4 = numeric()
ASEHolder5 = numeric()
ASEHolder6 = numeric()
ASEHolder7 = numeric()
ASEHolder8 = numeric()
ASEHolder9 = numeric()
ASEHolder10 = numeric()
ASEHolder11 = numeric()
ASEHolder12 = numeric()
for( k in 1:(84-(trainingSize + j) + 1))
{
sink("file")
model1 = invisible(aic.wge(temp2[k:(k+(trainingSize-1-1))],type="aic"))
model1_est = invisible(est.arma.wge(temp2[k:(k+(trainingSize-1-1))],p=model1$p,q=model1$q))
forecasts = fore.aruma.wge(temp1$STD_Cases[k:(k+(trainingSize-1))],phi = model1_est$phi, theta = model1_est$theta, s = 0, d = 1,n.ahead = j,plot=FALSE)
ASEHolder1[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 1 - 1)] - forecasts$f[1:1])^2)
ASEHolder2[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 2 - 1)] - forecasts$f[1:2])^2)
ASEHolder3[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 3 - 1)] - forecasts$f[1:3])^2)
ASEHolder4[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 4 - 1)] - forecasts$f[1:4])^2)
ASEHolder5[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 5 - 1)] - forecasts$f[1:5])^2)
ASEHolder6[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 6 - 1)] - forecasts$f[1:6])^2)
ASEHolder7[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 7 - 1)] - forecasts$f[1:7])^2)
ASEHolder8[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 8 - 1)] - forecasts$f[1:8])^2)
ASEHolder9[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 9 - 1)] - forecasts$f[1:9])^2)
ASEHolder10[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 10 - 1)] - forecasts$f[1:10])^2)
ASEHolder11[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 11 - 1)] - forecasts$f[1:11])^2)
ASEHolder12[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 12 - 1)] - forecasts$f[1:12])^2)
sink()
assign(paste("ARIMA_Results_",k,sep=""),(temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + j - 1)] - forecasts$f)^2)
}
WindowedASE1 = mean(ASEHolder1)
WindowedASE2 = mean(ASEHolder2)
WindowedASE3 = mean(ASEHolder3)
WindowedASE4 = mean(ASEHolder4)
WindowedASE5 = mean(ASEHolder5)
WindowedASE6 = mean(ASEHolder6)
WindowedASE7 = mean(ASEHolder7)
WindowedASE8 = mean(ASEHolder8)
WindowedASE9 = mean(ASEHolder9)
WindowedASE10 = mean(ASEHolder10)
WindowedASE11 = mean(ASEHolder11)
WindowedASE12 = mean(ASEHolder12)
results[i,paste0("ARIMA_1_ASE")] = WindowedASE1
results[i,paste0("ARIMA_2_ASE")] = WindowedASE2
results[i,paste0("ARIMA_3_ASE")] = WindowedASE3
results[i,paste0("ARIMA_4_ASE")] = WindowedASE4
results[i,paste0("ARIMA_5_ASE")] = WindowedASE5
results[i,paste0("ARIMA_6_ASE")] = WindowedASE6
results[i,paste0("ARIMA_7_ASE")] = WindowedASE7
results[i,paste0("ARIMA_8_ASE")] = WindowedASE8
results[i,paste0("ARIMA_9_ASE")] = WindowedASE9
results[i,paste0("ARIMA_10_ASE")] = WindowedASE10
results[i,paste0("ARIMA_11_ASE")] = WindowedASE11
results[i,paste0("ARIMA_12_ASE")] = WindowedASE12
results[i,paste0("ARIMA_F1")] = forecasts$f[1]
results[i,paste0("ARIMA_F2")] = forecasts$f[2]
results[i,paste0("ARIMA_F3")] = forecasts$f[3]
results[i,paste0("ARIMA_F4")] = forecasts$f[4]
results[i,paste0("ARIMA_F5")] = forecasts$f[5]
results[i,paste0("ARIMA_F6")] = forecasts$f[6]
results[i,paste0("ARIMA_F7")] = forecasts$f[7]
results[i,paste0("ARIMA_F8")] = forecasts$f[8]
results[i,paste0("ARIMA_F9")] = forecasts$f[9]
results[i,paste0("ARIMA_F10")] = forecasts$f[10]
results[i,paste0("ARIMA_F11")] = forecasts$f[11]
results[i,paste0("ARIMA_F12")] = forecasts$f[12]
#ARIMA Model with q=0 and S=12
nulldev()
temp2 = artrans.wge(temp1$STD_Cases,phi.tr=c(rep(0,11),1))
dev.off()
trainingSize = 60
ASEHolder1 = numeric()
ASEHolder2 = numeric()
ASEHolder3 = numeric()
ASEHolder4 = numeric()
ASEHolder5 = numeric()
ASEHolder6 = numeric()
ASEHolder7 = numeric()
ASEHolder8 = numeric()
ASEHolder9 = numeric()
ASEHolder10 = numeric()
ASEHolder11 = numeric()
ASEHolder12 = numeric()
for( k in 1:(84-(trainingSize + j) + 1))
{
sink("file")
model1 = invisible(aic.wge(temp2[k:(k+(trainingSize-1-12))],q=0, type="aic"))
if (model1$p == 0){
newphi = 1
} else {
newphi = model1$p
}
model1_est = invisible(est.ar.wge(temp2[k:(k+(trainingSize-1-12))],p=newphi))
forecasts = fore.aruma.wge(temp1$STD_Cases[k:(k+(trainingSize-1))],phi = model1_est$phi, theta = 0, s = 12, d = 0,n.ahead = j,plot=FALSE)
ASEHolder1[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 1 - 1)] - forecasts$f[1:1])^2)
ASEHolder2[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 2 - 1)] - forecasts$f[1:2])^2)
ASEHolder3[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 3 - 1)] - forecasts$f[1:3])^2)
ASEHolder4[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 4 - 1)] - forecasts$f[1:4])^2)
ASEHolder5[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 5 - 1)] - forecasts$f[1:5])^2)
ASEHolder6[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 6 - 1)] - forecasts$f[1:6])^2)
ASEHolder7[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 7 - 1)] - forecasts$f[1:7])^2)
ASEHolder8[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 8 - 1)] - forecasts$f[1:8])^2)
ASEHolder9[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 9 - 1)] - forecasts$f[1:9])^2)
ASEHolder10[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 10 - 1)] - forecasts$f[1:10])^2)
ASEHolder11[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 11 - 1)] - forecasts$f[1:11])^2)
ASEHolder12[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 12 - 1)] - forecasts$f[1:12])^2)
sink()
assign(paste("ARIS_Results_",k,sep=""),(temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + j - 1)] - forecasts$f)^2)
assign(paste("ARIS_DF_",k,sep=""),trainingSize-(newphi+1))
}
WindowedASE1 = mean(ASEHolder1)
WindowedASE2 = mean(ASEHolder2)
WindowedASE3 = mean(ASEHolder3)
WindowedASE4 = mean(ASEHolder4)
WindowedASE5 = mean(ASEHolder5)
WindowedASE6 = mean(ASEHolder6)
WindowedASE7 = mean(ASEHolder7)
WindowedASE8 = mean(ASEHolder8)
WindowedASE9 = mean(ASEHolder9)
WindowedASE10 = mean(ASEHolder10)
WindowedASE11 = mean(ASEHolder11)
WindowedASE12 = mean(ASEHolder12)
results[i,paste0("ARI_S12_1_ASE")] = WindowedASE1
results[i,paste0("ARI_S12_2_ASE")] = WindowedASE2
results[i,paste0("ARI_S12_3_ASE")] = WindowedASE3
results[i,paste0("ARI_S12_4_ASE")] = WindowedASE4
results[i,paste0("ARI_S12_5_ASE")] = WindowedASE5
results[i,paste0("ARI_S12_6_ASE")] = WindowedASE6
results[i,paste0("ARI_S12_7_ASE")] = WindowedASE7
results[i,paste0("ARI_S12_8_ASE")] = WindowedASE8
results[i,paste0("ARI_S12_9_ASE")] = WindowedASE9
results[i,paste0("ARI_S12_10_ASE")] = WindowedASE10
results[i,paste0("ARI_S12_11_ASE")] = WindowedASE11
results[i,paste0("ARI_S12_12_ASE")] = WindowedASE12
results[i,paste0("ARI_S12_F1")] = forecasts$f[1]
results[i,paste0("ARI_S12_F2")] = forecasts$f[2]
results[i,paste0("ARI_S12_F3")] = forecasts$f[3]
results[i,paste0("ARI_S12_F4")] = forecasts$f[4]
results[i,paste0("ARI_S12_F5")] = forecasts$f[5]
results[i,paste0("ARI_S12_F6")] = forecasts$f[6]
results[i,paste0("ARI_S12_F7")] = forecasts$f[7]
results[i,paste0("ARI_S12_F8")] = forecasts$f[8]
results[i,paste0("ARI_S12_F9")] = forecasts$f[9]
results[i,paste0("ARI_S12_F10")] = forecasts$f[10]
results[i,paste0("ARI_S12_F11")] = forecasts$f[11]
results[i,paste0("ARI_S12_F12")] = forecasts$f[12]
#ARIMA Model with S=12
nulldev()
temp2 = artrans.wge(temp1$STD_Cases,phi.tr=c(rep(0,11),1))
dev.off()
trainingSize = 60
ASEHolder1 = numeric()
ASEHolder2 = numeric()
ASEHolder3 = numeric()
ASEHolder4 = numeric()
ASEHolder5 = numeric()
ASEHolder6 = numeric()
ASEHolder7 = numeric()
ASEHolder8 = numeric()
ASEHolder9 = numeric()
ASEHolder10 = numeric()
ASEHolder11 = numeric()
ASEHolder12 = numeric()
for( k in 1:(84-(trainingSize + j) + 1))
{
sink("file")
model1 = invisible(aic.wge(temp2[k:(k+(trainingSize-1-12))],type="aic"))
model1_est = invisible(est.arma.wge(temp2[k:(k+(trainingSize-1-12))],p=model1$p,q=model1$q))
forecasts = fore.aruma.wge(temp1$STD_Cases[k:(k+(trainingSize-1))],phi = model1_est$phi, theta = model1_est$theta, s = 12, d = 0,n.ahead = j,plot=FALSE)
ASEHolder1[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 1 - 1)] - forecasts$f[1:1])^2)
ASEHolder2[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 2 - 1)] - forecasts$f[1:2])^2)
ASEHolder3[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 3 - 1)] - forecasts$f[1:3])^2)
ASEHolder4[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 4 - 1)] - forecasts$f[1:4])^2)
ASEHolder5[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 5 - 1)] - forecasts$f[1:5])^2)
ASEHolder6[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 6 - 1)] - forecasts$f[1:6])^2)
ASEHolder7[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 7 - 1)] - forecasts$f[1:7])^2)
ASEHolder8[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 8 - 1)] - forecasts$f[1:8])^2)
ASEHolder9[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 9 - 1)] - forecasts$f[1:9])^2)
ASEHolder10[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 10 - 1)] - forecasts$f[1:10])^2)
ASEHolder11[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 11 - 1)] - forecasts$f[1:11])^2)
ASEHolder12[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 12 - 1)] - forecasts$f[1:12])^2)
sink()
assign(paste("ARIMAS_Results_",k,sep=""),(temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + j - 1)] - forecasts$f)^2)
}
WindowedASE1 = mean(ASEHolder1)
WindowedASE2 = mean(ASEHolder2)
WindowedASE3 = mean(ASEHolder3)
WindowedASE4 = mean(ASEHolder4)
WindowedASE5 = mean(ASEHolder5)
WindowedASE6 = mean(ASEHolder6)
WindowedASE7 = mean(ASEHolder7)
WindowedASE8 = mean(ASEHolder8)
WindowedASE9 = mean(ASEHolder9)
WindowedASE10 = mean(ASEHolder10)
WindowedASE11 = mean(ASEHolder11)
WindowedASE12 = mean(ASEHolder12)
results[i,paste0("ARIMA_S12_1_ASE")] = WindowedASE1
results[i,paste0("ARIMA_S12_2_ASE")] = WindowedASE2
results[i,paste0("ARIMA_S12_3_ASE")] = WindowedASE3
results[i,paste0("ARIMA_S12_4_ASE")] = WindowedASE4
results[i,paste0("ARIMA_S12_5_ASE")] = WindowedASE5
results[i,paste0("ARIMA_S12_6_ASE")] = WindowedASE6
results[i,paste0("ARIMA_S12_7_ASE")] = WindowedASE7
results[i,paste0("ARIMA_S12_8_ASE")] = WindowedASE8
results[i,paste0("ARIMA_S12_9_ASE")] = WindowedASE9
results[i,paste0("ARIMA_S12_10_ASE")] = WindowedASE10
results[i,paste0("ARIMA_S12_11_ASE")] = WindowedASE11
results[i,paste0("ARIMA_S12_12_ASE")] = WindowedASE12
results[i,paste0("ARIMA_S12_F1")] = forecasts$f[1]
results[i,paste0("ARIMA_S12_F2")] = forecasts$f[2]
results[i,paste0("ARIMA_S12_F3")] = forecasts$f[3]
results[i,paste0("ARIMA_S12_F4")] = forecasts$f[4]
results[i,paste0("ARIMA_S12_F5")] = forecasts$f[5]
results[i,paste0("ARIMA_S12_F6")] = forecasts$f[6]
results[i,paste0("ARIMA_S12_F7")] = forecasts$f[7]
results[i,paste0("ARIMA_S12_F8")] = forecasts$f[8]
results[i,paste0("ARIMA_S12_F9")] = forecasts$f[9]
results[i,paste0("ARIMA_S12_F10")] = forecasts$f[10]
results[i,paste0("ARIMA_S12_F11")] = forecasts$f[11]
results[i,paste0("ARIMA_S12_F12")] = forecasts$f[12]
#Random Forest
trainingSize = 60
ASEHolder1 = numeric()
ASEHolder2 = numeric()
ASEHolder3 = numeric()
ASEHolder4 = numeric()
ASEHolder5 = numeric()
ASEHolder6 = numeric()
ASEHolder7 = numeric()
ASEHolder8 = numeric()
ASEHolder9 = numeric()
ASEHolder10 = numeric()
ASEHolder11 = numeric()
ASEHolder12 = numeric()
for( k in 1:(84-(trainingSize + j) + 1))
{
sink("file")
forecasts <- rf_ts(j, temp1[k:(k+(trainingSize-1)),], FALSE)
ASEHolder1[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 1 - 1)] - forecasts$forecast[1:1])^2)
ASEHolder2[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 2 - 1)] - forecasts$forecast[1:2])^2)
ASEHolder3[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 3 - 1)] - forecasts$forecast[1:3])^2)
ASEHolder4[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 4 - 1)] - forecasts$forecast[1:4])^2)
ASEHolder5[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 5 - 1)] - forecasts$forecast[1:5])^2)
ASEHolder6[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 6 - 1)] - forecasts$forecast[1:6])^2)
ASEHolder7[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 7 - 1)] - forecasts$forecast[1:7])^2)
ASEHolder8[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 8 - 1)] - forecasts$forecast[1:8])^2)
ASEHolder9[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 9 - 1)] - forecasts$forecast[1:9])^2)
ASEHolder10[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 10 - 1)] - forecasts$forecast[1:10])^2)
ASEHolder11[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 11 - 1)] - forecasts$forecast[1:11])^2)
ASEHolder12[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 12 - 1)] - forecasts$forecast[1:12])^2)
sink()
assign(paste("RF_Results_",k,sep=""),(temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + j - 1)] - forecasts$forecast)^2)
}
WindowedASE1 = mean(ASEHolder1)
WindowedASE2 = mean(ASEHolder2)
WindowedASE3 = mean(ASEHolder3)
WindowedASE4 = mean(ASEHolder4)
WindowedASE5 = mean(ASEHolder5)
WindowedASE6 = mean(ASEHolder6)
WindowedASE7 = mean(ASEHolder7)
WindowedASE8 = mean(ASEHolder8)
WindowedASE9 = mean(ASEHolder9)
WindowedASE10 = mean(ASEHolder10)
WindowedASE11 = mean(ASEHolder11)
WindowedASE12 = mean(ASEHolder12)
results[i,paste0("RF_1_ASE")] = WindowedASE1
results[i,paste0("RF_2_ASE")] = WindowedASE2
results[i,paste0("RF_3_ASE")] = WindowedASE3
results[i,paste0("RF_4_ASE")] = WindowedASE4
results[i,paste0("RF_5_ASE")] = WindowedASE5
results[i,paste0("RF_6_ASE")] = WindowedASE6
results[i,paste0("RF_7_ASE")] = WindowedASE7
results[i,paste0("RF_8_ASE")] = WindowedASE8
results[i,paste0("RF_9_ASE")] = WindowedASE9
results[i,paste0("RF_10_ASE")] = WindowedASE10
results[i,paste0("RF_11_ASE")] = WindowedASE11
results[i,paste0("RF_12_ASE")] = WindowedASE12
results[i,paste0("RF_F1")] = forecasts$forecast[1]
results[i,paste0("RF_F2")] = forecasts$forecast[2]
results[i,paste0("RF_F3")] = forecasts$forecast[3]
results[i,paste0("RF_F4")] = forecasts$forecast[4]
results[i,paste0("RF_F5")] = forecasts$forecast[5]
results[i,paste0("RF_F6")] = forecasts$forecast[6]
results[i,paste0("RF_F7")] = forecasts$forecast[7]
results[i,paste0("RF_F8")] = forecasts$forecast[8]
results[i,paste0("RF_F9")] = forecasts$forecast[9]
results[i,paste0("RF_F10")] = forecasts$forecast[10]
results[i,paste0("RF_F11")] = forecasts$forecast[11]
results[i,paste0("RF_F12")] = forecasts$forecast[12]
# MLP
trainingSize = 60
ASEHolder1 = numeric()
ASEHolder2 = numeric()
ASEHolder3 = numeric()
ASEHolder4 = numeric()
ASEHolder5 = numeric()
ASEHolder6 = numeric()
ASEHolder7 = numeric()
ASEHolder8 = numeric()
ASEHolder9 = numeric()
ASEHolder10 = numeric()
ASEHolder11 = numeric()
ASEHolder12 = numeric()
for( k in 1:(84-(trainingSize + j) + 1))
{
sink("file")
forecasts <- nnc(temp1$STD_Cases[k:(k+(trainingSize-1))], j, 10, c(5, 10, 15, 5), FALSE)
ASEHolder1[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 1 - 1)] - forecasts$forecast[1:1])^2)
ASEHolder2[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 2 - 1)] - forecasts$forecast[1:2])^2)
ASEHolder3[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 3 - 1)] - forecasts$forecast[1:3])^2)
ASEHolder4[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 4 - 1)] - forecasts$forecast[1:4])^2)
ASEHolder5[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 5 - 1)] - forecasts$forecast[1:5])^2)
ASEHolder6[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 6 - 1)] - forecasts$forecast[1:6])^2)
ASEHolder7[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 7 - 1)] - forecasts$forecast[1:7])^2)
ASEHolder8[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 8 - 1)] - forecasts$forecast[1:8])^2)
ASEHolder9[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 9 - 1)] - forecasts$forecast[1:9])^2)
ASEHolder10[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 10 - 1)] - forecasts$forecast[1:10])^2)
ASEHolder11[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 11 - 1)] - forecasts$forecast[1:11])^2)
ASEHolder12[k] = mean((temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + 12 - 1)] - forecasts$forecast[1:12])^2)
sink()
assign(paste("MLP_Results_",k,sep=""),(temp1$STD_Cases[(trainingSize+k):(trainingSize+ k + j - 1)] - forecasts$forecast)^2)
}
WindowedASE1 = mean(ASEHolder1)
WindowedASE2 = mean(ASEHolder2)
WindowedASE3 = mean(ASEHolder3)
WindowedASE4 = mean(ASEHolder4)
WindowedASE5 = mean(ASEHolder5)
WindowedASE6 = mean(ASEHolder6)
WindowedASE7 = mean(ASEHolder7)
WindowedASE8 = mean(ASEHolder8)
WindowedASE9 = mean(ASEHolder9)
WindowedASE10 = mean(ASEHolder10)
WindowedASE11 = mean(ASEHolder11)
WindowedASE12 = mean(ASEHolder12)
results[i,paste0("MLP_1_ASE")] = WindowedASE1
results[i,paste0("MLP_2_ASE")] = WindowedASE2
results[i,paste0("MLP_3_ASE")] = WindowedASE3
results[i,paste0("MLP_4_ASE")] = WindowedASE4
results[i,paste0("MLP_5_ASE")] = WindowedASE5
results[i,paste0("MLP_6_ASE")] = WindowedASE6
results[i,paste0("MLP_7_ASE")] = WindowedASE7
results[i,paste0("MLP_8_ASE")] = WindowedASE8
results[i,paste0("MLP_9_ASE")] = WindowedASE9
results[i,paste0("MLP_10_ASE")] = WindowedASE10
results[i,paste0("MLP_11_ASE")] = WindowedASE11
results[i,paste0("MLP_12_ASE")] = WindowedASE12
results[i,paste0("MLP_F1")] = forecasts$forecast[1]
results[i,paste0("MLP_F2")] = forecasts$forecast[2]
results[i,paste0("MLP_F3")] = forecasts$forecast[3]
results[i,paste0("MLP_F4")] = forecasts$forecast[4]
results[i,paste0("MLP_F5")] = forecasts$forecast[5]
results[i,paste0("MLP_F6")] = forecasts$forecast[6]
results[i,paste0("MLP_F7")] = forecasts$forecast[7]
results[i,paste0("MLP_F8")] = forecasts$forecast[8]
results[i,paste0("MLP_F9")] = forecasts$forecast[9]
results[i,paste0("MLP_F10")] = forecasts$forecast[10]
results[i,paste0("MLP_F11")] = forecasts$forecast[11]
results[i,paste0("MLP_F12")] = forecasts$forecast[12]
results[i,paste0("ACTUAL_1")] = temp1$STD_Cases[73]
results[i,paste0("ACTUAL_2")] = temp1$STD_Cases[74]
results[i,paste0("ACTUAL_3")] = temp1$STD_Cases[75]
results[i,paste0("ACTUAL_4")] = temp1$STD_Cases[76]
results[i,paste0("ACTUAL_5")] = temp1$STD_Cases[77]
results[i,paste0("ACTUAL_6")] = temp1$STD_Cases[78]
results[i,paste0("ACTUAL_7")] = temp1$STD_Cases[79]
results[i,paste0("ACTUAL_8")] = temp1$STD_Cases[80]
results[i,paste0("ACTUAL_9")] = temp1$STD_Cases[81]
results[i,paste0("ACTUAL_10")] = temp1$STD_Cases[82]
results[i,paste0("ACTUAL_11")] = temp1$STD_Cases[83]
results[i,paste0("ACTUAL_12")] = temp1$STD_Cases[84]
#graph ASEs for each Model
EqualMeans_Results <- rbind(EqualMeans_Results_1,EqualMeans_Results_2,EqualMeans_Results_3,EqualMeans_Results_4,EqualMeans_Results_5,EqualMeans_Results_6,
EqualMeans_Results_7,EqualMeans_Results_8,EqualMeans_Results_9,EqualMeans_Results_10,EqualMeans_Results_11,EqualMeans_Results_12,
EqualMeans_Results_13)
AR_Results <- rbind(AR_Results_1,AR_Results_2,AR_Results_3,AR_Results_4,AR_Results_5,AR_Results_6,AR_Results_7,AR_Results_8,AR_Results_9,AR_Results_10,
AR_Results_11,AR_Results_12,AR_Results_13)
ARMA_Results <- rbind(ARMA_Results_1,ARMA_Results_2,ARMA_Results_3,ARMA_Results_4,ARMA_Results_5,ARMA_Results_6,ARMA_Results_7,ARMA_Results_8,
ARMA_Results_9,ARMA_Results_10,ARMA_Results_11,ARMA_Results_12,ARMA_Results_13)
ARI_Results <- rbind(ARI_Results_1,ARI_Results_2,ARI_Results_3,ARI_Results_4,ARI_Results_5,ARI_Results_6,ARI_Results_7,ARI_Results_8,
ARI_Results_9,ARI_Results_10,ARI_Results_11,ARI_Results_12,ARI_Results_13)
ARIMA_Results <- rbind(ARIMA_Results_1,ARIMA_Results_2,ARIMA_Results_3,ARIMA_Results_4,ARIMA_Results_5,ARIMA_Results_6,ARIMA_Results_7,ARIMA_Results_8,
ARIMA_Results_9,ARIMA_Results_10,ARIMA_Results_11,ARIMA_Results_12,ARIMA_Results_13)
ARIS_Results <- rbind(ARIS_Results_1,ARIS_Results_2,ARIS_Results_3,ARIS_Results_4,ARIS_Results_5,ARIS_Results_6,ARIS_Results_7,ARIS_Results_8,
ARIS_Results_9,ARIS_Results_10,ARIS_Results_11,ARIS_Results_12,ARIS_Results_13)
ARIMAS_Results <- rbind(ARIMAS_Results_1,ARIMAS_Results_2,ARIMAS_Results_3,ARIMAS_Results_4,ARIMAS_Results_5,ARIMAS_Results_6,ARIMAS_Results_7,ARIMAS_Results_8,
ARIMAS_Results_9,ARIMAS_Results_10,ARIMAS_Results_11,ARIMAS_Results_12,ARIMAS_Results_13)
RF_Results <- rbind(RF_Results_1,RF_Results_2,RF_Results_3,RF_Results_4,RF_Results_5,RF_Results_6,RF_Results_7,RF_Results_8,
RF_Results_9,RF_Results_10,RF_Results_11,RF_Results_12,RF_Results_13)
MLP_Results <- rbind(MLP_Results_1,MLP_Results_2,MLP_Results_3,MLP_Results_4,MLP_Results_5,MLP_Results_6,MLP_Results_7,MLP_Results_8,
MLP_Results_9,MLP_Results_10,MLP_Results_11,MLP_Results_12,MLP_Results_13)
EqualMeans_Means <- colMeans(EqualMeans_Results)
AR_Means <- colMeans(AR_Results)
ARMA_Means <- colMeans(ARMA_Results)
ARI_Means <- colMeans(ARI_Results)
ARIMA_Means <- colMeans(ARIMA_Results)
ARIS_Means <- colMeans(ARIS_Results)
ARIMAS_Means <- colMeans(ARIMAS_Results)
RF_Means <- colMeans(RF_Results)
MLP_Means <- colMeans(MLP_Results)
Combined_Means <- data.frame(EqualMeans_Means,AR_Means, ARMA_Means, ARI_Means, ARIMA_Means, ARIS_Means, ARIMAS_Means,RF_Means,MLP_Means)
Combined_Means$horizon <- as.numeric(row.names(Combined_Means))
# more colors #73EBAE
g <- ggplot(data=Combined_Means, aes(horizon)) +
geom_line(aes(y=EqualMeans_Means, color="Equal Means"),size=1.5) +
geom_line(aes(y=AR_Means, color="AR"),size=1.5) +
geom_line(aes(y=ARMA_Means, color="ARMA"),size=1.5) +
geom_line(aes(y=ARI_Means, color="AR with d=1"),size=1.5) +
geom_line(aes(y=ARIMA_Means, color="ARIMA with d=1"),size=1.5) +
geom_line(aes(y=ARIS_Means, color="AR with s=12"),size=1.5) +
geom_line(aes(y=ARIMAS_Means, color="ARIMA with d=0, s=12"),size=1.5) +
geom_line(aes(y=RF_Means, color="Random Forest"),size=1.5) +
geom_line(aes(y=MLP_Means, color="MLP"),size=1.5) +
scale_color_manual(values = c(
'Equal Means' = '#004159',
'AR' = '#65A8C4',
'ARMA' = '#8C65D3',
'AR with d=1' = '#9A93EC',
'ARIMA with d=1' = '#0052A5',
'AR with s=12' = '#413BF7',
'ARIMA with d=0, s=12' = '#00ADCE',
'Random Forest' = '#59DBF1',
'MLP' = '#00C590'
)) +
labs(color='Models') +
scale_x_continuous(breaks=seq(0,13,1)) +
ggtitle(paste("Model ASEs for ", product,"and Customer",customer)) +
xlab("Month Ahead Forecast") +
ylab("ASE") +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"), legend.title = element_blank())
print(g)
# f-statistic calculations
EqualMeans_DF <- rbind(EqualMeans_DF_1,EqualMeans_DF_2,EqualMeans_DF_3,EqualMeans_DF_4,EqualMeans_DF_5,EqualMeans_DF_6,EqualMeans_DF_7,
EqualMeans_DF_8,EqualMeans_DF_9,EqualMeans_DF_10,EqualMeans_DF_11,EqualMeans_DF_12,EqualMeans_DF_13)
AR_DF <- rbind(AR_DF_1,AR_DF_2,AR_DF_3,AR_DF_4,AR_DF_5,AR_DF_6,AR_DF_7,AR_DF_8,AR_DF_9,AR_DF_10,AR_DF_11,AR_DF_12,AR_DF_13)
ARI_DF <- rbind(ARI_DF_1,ARI_DF_2,ARI_DF_3,ARI_DF_4,ARI_DF_5,ARI_DF_6,ARI_DF_7,ARI_DF_8,ARI_DF_9,ARI_DF_10,ARI_DF_11,ARI_DF_12,ARI_DF_13)
ARIS_DF <- rbind(ARIS_DF_1,ARIS_DF_2,ARIS_DF_3,ARIS_DF_4,ARIS_DF_5,ARIS_DF_6,ARIS_DF_7,ARIS_DF_8,ARIS_DF_9,ARIS_DF_10,ARIS_DF_11,ARIS_DF_12,ARIS_DF_13)
EqualMeans_Results <- rbind(sum(EqualMeans_Results_1),sum(EqualMeans_Results_2),sum(EqualMeans_Results_3),sum(EqualMeans_Results_4),sum(EqualMeans_Results_5),
sum(EqualMeans_Results_6),sum(EqualMeans_Results_7),sum(EqualMeans_Results_8),sum(EqualMeans_Results_9),sum(EqualMeans_Results_10),
sum(EqualMeans_Results_11),sum(EqualMeans_Results_12),sum(EqualMeans_Results_13))
AR_Results <- rbind(sum(AR_Results_1),sum(AR_Results_2),sum(AR_Results_3),sum(AR_Results_4),sum(AR_Results_5),sum(AR_Results_6),sum(AR_Results_7),
sum(AR_Results_8),sum(AR_Results_9),sum(AR_Results_10),sum(AR_Results_11),sum(AR_Results_12),sum(AR_Results_13))
ARI_Results <- rbind(sum(ARI_Results_1),sum(ARI_Results_2),sum(ARI_Results_3),sum(ARI_Results_4),sum(ARI_Results_5),sum(ARI_Results_6),sum(ARI_Results_7),
sum(ARI_Results_8),sum(ARI_Results_9),sum(ARI_Results_10),sum(ARI_Results_11),sum(ARI_Results_12),sum(ARI_Results_13))
ARIS_Results <- rbind(sum(ARIS_Results_1),sum(ARIS_Results_2),sum(ARIS_Results_3),sum(ARIS_Results_4),sum(ARIS_Results_5),sum(ARIS_Results_6),sum(ARIS_Results_7),
sum(ARIS_Results_8),sum(ARIS_Results_9),sum(ARIS_Results_10),sum(ARIS_Results_11),sum(ARIS_Results_12),sum(ARIS_Results_13))
df_model = EqualMeans_DF - AR_DF
ss_model = EqualMeans_Results - AR_Results
ms_model = ss_model/df_model
ms_ar = AR_Results/AR_DF
F = ms_model/ms_ar
AR_p_value = pf(F,df_model,AR_DF,lower.tail=FALSE)
AR_p_tally = sum(AR_p_value[,1]<.05)
results[i,"AR_F_Tally"] = AR_p_tally
if (AR_p_tally >= 9){
results[i,"AR_F_Conclusion"] = "Different"
} else if (AR_p_tally <= 4){
results[i,"AR_F_Conclusion"] = "Same"
} else {
results[i,"AR_F_Conclusion"] = "Inconclusive"
}
df_model = EqualMeans_DF - ARI_DF
ss_model = EqualMeans_Results - ARI_Results
ms_model = ss_model/df_model
ms_ari = ARI_Results/ARI_DF
F = ms_model/ms_ari
ARI_p_value = pf(F,df_model,ARI_DF,lower.tail=FALSE)
ARI_p_tally = sum(ARI_p_value[,1]<.05)
results[i,"ARI_F_Tally"] = ARI_p_tally
if (ARI_p_tally >= 9){
results[i,"ARI_F_Conclusion"] = "Different"
} else if (ARI_p_tally <= 4){
results[i,"ARI_F_Conclusion"] = "Same"
} else {
results[i,"ARI_F_Conclusion"] = "Inconclusive"
}
df_model = EqualMeans_DF - ARIS_DF
ss_model = EqualMeans_Results - ARIS_Results
ms_model = ss_model/df_model
ms_aris = ARIS_Results/ARIS_DF
F = ms_model/ms_aris
ARIS_p_value = pf(F,df_model,ARIS_DF,lower.tail=FALSE)
ARIS_p_tally = sum(ARIS_p_value[,1]<.05)
results[i,"ARIS_F_Tally"] = ARIS_p_tally
if (ARIS_p_tally >= 9){
results[i,"ARIS_F_Conclusion"] = "Different"
} else if (ARIS_p_tally <= 4){
results[i,"ARIS_F_Conclusion"] = "Same"
} else {
results[i,"ARIS_F_Conclusion"] = "Inconclusive"
}
}
results$winning_1 <- colnames(results[c("EqualMeans_1_ASE","AR_1_ASE","ARMA_1_ASE","ARI_1_ASE","ARIMA_1_ASE","ARI_S12_1_ASE","ARIMA_S12_1_ASE","RF_1_ASE","MLP_1_ASE")])[apply(results[c("EqualMeans_1_ASE","AR_1_ASE","ARMA_1_ASE","ARI_1_ASE","ARIMA_1_ASE","ARI_S12_1_ASE","ARIMA_S12_1_ASE","RF_1_ASE","MLP_1_ASE")],1,which.min)]
results$winning_2 <- colnames(results[c("EqualMeans_2_ASE","AR_2_ASE","ARMA_2_ASE","ARI_2_ASE","ARIMA_2_ASE","ARI_S12_2_ASE","ARIMA_S12_2_ASE","RF_2_ASE","MLP_2_ASE")])[apply(results[c("EqualMeans_2_ASE","AR_2_ASE","ARMA_2_ASE","ARI_2_ASE","ARIMA_2_ASE","ARI_S12_2_ASE","ARIMA_S12_2_ASE","RF_2_ASE","MLP_2_ASE")],1,which.min)]
results$winning_3 <- colnames(results[c("EqualMeans_3_ASE","AR_3_ASE","ARMA_3_ASE","ARI_3_ASE","ARIMA_3_ASE","ARI_S12_3_ASE","ARIMA_S12_3_ASE","RF_3_ASE","MLP_3_ASE")])[apply(results[c("EqualMeans_3_ASE","AR_3_ASE","ARMA_3_ASE","ARI_3_ASE","ARIMA_3_ASE","ARI_S12_3_ASE","ARIMA_S12_3_ASE","RF_3_ASE","MLP_3_ASE")],1,which.min)]
results$winning_4 <- colnames(results[c("EqualMeans_4_ASE","AR_4_ASE","ARMA_4_ASE","ARI_4_ASE","ARIMA_4_ASE","ARI_S12_4_ASE","ARIMA_S12_4_ASE","RF_4_ASE","MLP_4_ASE")])[apply(results[c("EqualMeans_4_ASE","AR_4_ASE","ARMA_4_ASE","ARI_4_ASE","ARIMA_4_ASE","ARI_S12_4_ASE","ARIMA_S12_4_ASE","RF_4_ASE","MLP_4_ASE")],1,which.min)]
results$winning_5 <- colnames(results[c("EqualMeans_5_ASE","AR_5_ASE","ARMA_5_ASE","ARI_5_ASE","ARIMA_5_ASE","ARI_S12_5_ASE","ARIMA_S12_5_ASE","RF_5_ASE","MLP_5_ASE")])[apply(results[c("EqualMeans_5_ASE","AR_5_ASE","ARMA_5_ASE","ARI_5_ASE","ARIMA_5_ASE","ARI_S12_5_ASE","ARIMA_S12_5_ASE","RF_5_ASE","MLP_5_ASE")],1,which.min)]
results$winning_6 <- colnames(results[c("EqualMeans_6_ASE","AR_6_ASE","ARMA_6_ASE","ARI_6_ASE","ARIMA_6_ASE","ARI_S12_6_ASE","ARIMA_S12_6_ASE","RF_6_ASE","MLP_6_ASE")])[apply(results[c("EqualMeans_6_ASE","AR_6_ASE","ARMA_6_ASE","ARI_6_ASE","ARIMA_6_ASE","ARI_S12_6_ASE","ARIMA_S12_6_ASE","RF_6_ASE","MLP_6_ASE")],1,which.min)]
results$winning_7 <- colnames(results[c("EqualMeans_7_ASE","AR_7_ASE","ARMA_7_ASE","ARI_7_ASE","ARIMA_7_ASE","ARI_S12_7_ASE","ARIMA_S12_7_ASE","RF_7_ASE","MLP_7_ASE")])[apply(results[c("EqualMeans_7_ASE","AR_7_ASE","ARMA_7_ASE","ARI_7_ASE","ARIMA_7_ASE","ARI_S12_7_ASE","ARIMA_S12_7_ASE","RF_7_ASE","MLP_7_ASE")],1,which.min)]
results$winning_8 <- colnames(results[c("EqualMeans_8_ASE","AR_8_ASE","ARMA_8_ASE","ARI_8_ASE","ARIMA_8_ASE","ARI_S12_8_ASE","ARIMA_S12_8_ASE","RF_8_ASE","MLP_8_ASE")])[apply(results[c("EqualMeans_8_ASE","AR_8_ASE","ARMA_8_ASE","ARI_8_ASE","ARIMA_8_ASE","ARI_S12_8_ASE","ARIMA_S12_8_ASE","RF_8_ASE","MLP_8_ASE")],1,which.min)]
results$winning_9 <- colnames(results[c("EqualMeans_9_ASE","AR_9_ASE","ARMA_9_ASE","ARI_9_ASE","ARIMA_9_ASE","ARI_S12_9_ASE","ARIMA_S12_9_ASE","RF_9_ASE","MLP_9_ASE")])[apply(results[c("EqualMeans_9_ASE","AR_9_ASE","ARMA_9_ASE","ARI_9_ASE","ARIMA_9_ASE","ARI_S12_9_ASE","ARIMA_S12_9_ASE","RF_9_ASE","MLP_9_ASE")],1,which.min)]
results$winning_10 <- colnames(results[c("EqualMeans_10_ASE","AR_10_ASE","ARMA_10_ASE","ARI_10_ASE","ARIMA_10_ASE","ARI_S12_10_ASE","ARIMA_S12_10_ASE","RF_10_ASE","MLP_10_ASE")])[apply(results[c("EqualMeans_10_ASE","AR_10_ASE","ARMA_10_ASE","ARI_10_ASE","ARIMA_10_ASE","ARI_S12_10_ASE","ARIMA_S12_10_ASE","RF_10_ASE","MLP_10_ASE")],1,which.min)]
results$winning_11 <- colnames(results[c("EqualMeans_11_ASE","AR_11_ASE","ARMA_11_ASE","ARI_11_ASE","ARIMA_11_ASE","ARI_S12_11_ASE","ARIMA_S12_11_ASE","RF_11_ASE","MLP_11_ASE")])[apply(results[c("EqualMeans_11_ASE","AR_11_ASE","ARMA_11_ASE","ARI_11_ASE","ARIMA_11_ASE","ARI_S12_11_ASE","ARIMA_S12_11_ASE","RF_11_ASE","MLP_11_ASE")],1,which.min)]
results$winning_12 <- colnames(results[c("EqualMeans_12_ASE","AR_12_ASE","ARMA_12_ASE","ARI_12_ASE","ARIMA_12_ASE","ARI_S12_12_ASE","ARIMA_S12_12_ASE","RF_12_ASE","MLP_12_ASE")])[apply(results[c("EqualMeans_12_ASE","AR_12_ASE","ARMA_12_ASE","ARI_12_ASE","ARIMA_12_ASE","ARI_S12_12_ASE","ARIMA_S12_12_ASE","RF_12_ASE","MLP_12_ASE")],1,which.min)]
return(formattable(results, align = c("l", rep("r", NCOL(table_a) - 1))))
}
#testing combo tester
x <- combo_tester(target_df)
